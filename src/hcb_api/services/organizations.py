# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.organization import Organization


class OrganizationsService(BaseService):
    @cast_models
    def get_a_single_organization(
        self, organization_id: str, expand: str = None
    ) -> Organization:
        """The organization must be in <a href='https://changelog.hcb.hackclub.com/transparent-finances-(optional-feature)-151427'><strong>Transparency Mode</strong></a>.

        :param organization_id: Organization ID or slug.
        :type organization_id: str
        :param expand: Object types to expand in the API response (separated by commas), defaults to None
        :type expand: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Return a transparent organization
        :rtype: Organization
        """

        Validator(str).validate(organization_id)
        Validator(str).is_optional().validate(expand)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v3/organizations/{{organization_id}}",
                self.get_default_headers(),
            )
            .add_path("organization_id", organization_id)
            .add_query("expand", expand)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return Organization._unmap(response)

    @cast_models
    def list_transparent_organizations(
        self,
        page: int = None,
        per_page: int = None,
        offset: int = None,
        expand: str = None,
    ) -> List[Organization]:
        """Returns a list of organizations in <a href='https://changelog.hcb.hackclub.com/transparent-finances-(optional-feature)-151427'><strong>Transparency Mode</strong></a> that have opted in to public listing.

        :param page: Page offset to fetch., defaults to None
        :type page: int, optional
        :param per_page: Number of results to return per page., defaults to None
        :type per_page: int, optional
        :param offset: Pad a number of results., defaults to None
        :type offset: int, optional
        :param expand: Object types to expand in the API response (separated by commas), defaults to None
        :type expand: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Return a list of transparent organizations
        :rtype: List[Organization]
        """

        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)
        Validator(int).is_optional().validate(offset)
        Validator(str).is_optional().validate(expand)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v3/organizations", self.get_default_headers()
            )
            .add_query("page", page)
            .add_query("per_page", per_page)
            .add_query("offset", offset)
            .add_query("expand", expand)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Organization._unmap(item) for item in response]
