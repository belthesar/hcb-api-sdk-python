# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel

import contextlib
with contextlib.suppress(ImportError):
    from .organization import Organization
    from .user import User


class CardType(Enum):
    """An enumeration representing different categories.

    :cvar VIRTUAL: "virtual"
    :vartype VIRTUAL: str
    :cvar PHYSICAL: "physical"
    :vartype PHYSICAL: str
    """

    VIRTUAL = "virtual"
    PHYSICAL = "physical"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CardType._member_map_.values()))


class CardStatus(Enum):
    """An enumeration representing different categories.

    :cvar ACTIVE: "active"
    :vartype ACTIVE: str
    :cvar FROZEN: "frozen"
    :vartype FROZEN: str
    :cvar CANCELED: "canceled"
    :vartype CANCELED: str
    """

    ACTIVE = "active"
    FROZEN = "frozen"
    CANCELED = "canceled"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CardStatus._member_map_.values()))


@JsonMap({"id_": "id", "type_": "type"})
class Card(BaseModel):
    """Card model

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param object: object, defaults to None
    :type object: str, optional
    :param href: href, defaults to None
    :type href: str, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param type_: type_, defaults to None
    :type type_: CardType, optional
    :param status: status, defaults to None
    :type status: CardStatus, optional
    :param issued_at: issued_at, defaults to None
    :type issued_at: str, optional
    :param owner: owner, defaults to None
    :type owner: User, optional
    :param organization: Organization model, defaults to None
    :type organization: Organization, optional
    """

    def __init__(
        self,
        id_: str = None,
        object: str = None,
        href: str = None,
        name: str = None,
        type_: CardType = None,
        status: CardStatus = None,
        issued_at: str = None,
        owner: User = None,
        organization: Organization = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if object is not None:
            self.object = object
        if href is not None:
            self.href = href
        if name is not None:
            self.name = name
        if type_ is not None:
            self.type_ = self._enum_matching(type_, CardType.list(), "type_")
        if status is not None:
            self.status = self._enum_matching(status, CardStatus.list(), "status")
        if issued_at is not None:
            self.issued_at = issued_at
        if owner is not None:
            self.owner = self._define_object(owner, User)
        if organization is not None:
            self.organization = self._define_object(organization, Organization)
