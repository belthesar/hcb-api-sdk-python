# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .organization import Organization
from .tag import Tag
from .card_charge import CardCharge
from .ach_transfer import AchTransfer
from .check import Check
from .donation import Donation
from .invoice import Invoice
from .transfer import Transfer


class TransactionType(Enum):
    """An enumeration representing different categories.

    :cvar INVOICE: "invoice"
    :vartype INVOICE: str
    :cvar DONATION: "donation"
    :vartype DONATION: str
    :cvar ACH_TRANSFER: "ach_transfer"
    :vartype ACH_TRANSFER: str
    :cvar CHECK: "check"
    :vartype CHECK: str
    :cvar TRANSFER: "transfer"
    :vartype TRANSFER: str
    :cvar BANK_ACCOUNT_TRANSACTION: "bank_account_transaction"
    :vartype BANK_ACCOUNT_TRANSACTION: str
    :cvar CARD_CHARGE: "card_charge"
    :vartype CARD_CHARGE: str
    """

    INVOICE = "invoice"
    DONATION = "donation"
    ACH_TRANSFER = "ach_transfer"
    CHECK = "check"
    TRANSFER = "transfer"
    BANK_ACCOUNT_TRANSACTION = "bank_account_transaction"
    CARD_CHARGE = "card_charge"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TransactionType._member_map_.values()))


@JsonMap({})
class Receipts(BaseModel):
    """Receipts

    :param count: count, defaults to None
    :type count: int, optional
    :param missing: missing, defaults to None
    :type missing: bool, optional
    """

    def __init__(self, count: int = None, missing: bool = None):
        if count is not None:
            self.count = count
        if missing is not None:
            self.missing = missing


@JsonMap({})
class Comments(BaseModel):
    """Comments

    :param count: count, defaults to None
    :type count: int, optional
    """

    def __init__(self, count: int = None):
        if count is not None:
            self.count = count


@JsonMap({"id_": "id", "date_": "date", "type_": "type"})
class Transaction(BaseModel):
    """Transaction model

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param object: object, defaults to None
    :type object: str, optional
    :param href: href, defaults to None
    :type href: str, optional
    :param amount_cents: amount_cents, defaults to None
    :type amount_cents: int, optional
    :param memo: memo, defaults to None
    :type memo: str, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param type_: type_, defaults to None
    :type type_: TransactionType, optional
    :param pending: pending, defaults to None
    :type pending: bool, optional
    :param receipts: receipts, defaults to None
    :type receipts: Receipts, optional
    :param comments: comments, defaults to None
    :type comments: Comments, optional
    :param organization: Organization model, defaults to None
    :type organization: Organization, optional
    :param tags: tags, defaults to None
    :type tags: List[Tag], optional
    :param card_charge: Card Charge model, defaults to None
    :type card_charge: CardCharge, optional
    :param ach_transfer: ACH Transfer model, defaults to None
    :type ach_transfer: AchTransfer, optional
    :param check: Check model, defaults to None
    :type check: Check, optional
    :param donation: Donation model, defaults to None
    :type donation: Donation, optional
    :param invoice: Invoice model, defaults to None
    :type invoice: Invoice, optional
    :param transfer: Transfer model, defaults to None
    :type transfer: Transfer, optional
    """

    def __init__(
        self,
        id_: str = None,
        object: str = None,
        href: str = None,
        amount_cents: int = None,
        memo: str = None,
        date_: str = None,
        type_: TransactionType = None,
        pending: bool = None,
        receipts: Receipts = None,
        comments: Comments = None,
        organization: Organization = None,
        tags: List[Tag] = None,
        card_charge: CardCharge = None,
        ach_transfer: AchTransfer = None,
        check: Check = None,
        donation: Donation = None,
        invoice: Invoice = None,
        transfer: Transfer = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if object is not None:
            self.object = object
        if href is not None:
            self.href = href
        if amount_cents is not None:
            self.amount_cents = amount_cents
        if memo is not None:
            self.memo = memo
        if date_ is not None:
            self.date_ = date_
        if type_ is not None:
            self.type_ = self._enum_matching(type_, TransactionType.list(), "type_")
        if pending is not None:
            self.pending = pending
        if receipts is not None:
            self.receipts = self._define_object(receipts, Receipts)
        if comments is not None:
            self.comments = self._define_object(comments, Comments)
        if organization is not None:
            self.organization = self._define_object(organization, Organization)
        if tags is not None:
            self.tags = self._define_list(tags, Tag)
        if card_charge is not None:
            self.card_charge = self._define_object(card_charge, CardCharge)
        if ach_transfer is not None:
            self.ach_transfer = self._define_object(ach_transfer, AchTransfer)
        if check is not None:
            self.check = self._define_object(check, Check)
        if donation is not None:
            self.donation = self._define_object(donation, Donation)
        if invoice is not None:
            self.invoice = self._define_object(invoice, Invoice)
        if transfer is not None:
            self.transfer = self._define_object(transfer, Transfer)
